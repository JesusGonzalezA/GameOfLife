{"version":3,"sources":["helpers/getEvolvedGrid.js","helpers/getGridClone.js","helpers/getInitializedGrid.js","helpers/getRandomGrid.js","helpers/getSwitchedCellGrid.js","types/types.js","reducers/gameReducer.js","store/store.js","components/Contact.js","components/Cell.js","actions/game.js","components/Controllers.js","components/Grid.js","App.js","index.js"],"names":["getEvolvedGrid","grid","rows","cols","gridClone","JSON","parse","stringify","getGridClone","i","j","count","countNeighbours","setCellValueHelper","row","col","total_neighbours","getInitializedGrid","Array","fill","map","getRandomGrid","from","length","Math","random","getSwitchedCellGrid","gridCopy","slice","types","initialConfig","generation","speed","cellSize","initialState","reducers","combineReducers","game","state","action","type","payload","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","Contact","className","id","href","target","rel","Cell","React","memo","dispatch","useDispatch","isAlive","useSelector","style","width","height","onClick","switchCell","Controllers","useState","intervalId","setIntervalId","handlePause","clearInterval","play","handleReset","pause","Button","setInterval","variant","DropdownButton","title","onSelect","key","event","preventDefault","aspect","split","Number","Dropdown","Item","eventKey","Grid","index_row","_","index_col","App","aria-hidden","ReactDOM","render","document","getElementById"],"mappings":"gRAEaA,EAAiB,SAAEC,EAAMC,EAAMC,GAIxC,IAFA,IAAIC,ECJoB,SAAEH,GAC1B,OAAOI,KAAKC,MAAMD,KAAKE,UAAWF,KAAKC,MAAMD,KAAKE,UAAWN,MDG7CO,CAAaP,GAEpBQ,EAAI,EAAGA,EAAIP,EAAMO,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAMO,IAAK,CAC7B,IAAIC,EAAQC,EAAiBX,EAAMQ,EAAGC,GAGlCT,EAAKQ,GAAGC,KAAOC,EAAQ,GAAKA,EAAQ,GACtCP,EAAUK,GAAGC,IAAK,EAGVT,EAAKQ,GAAGC,IAAgB,IAAVC,EAItBP,EAAUK,GAAGC,GAAKT,EAAKQ,GAAGC,GAH1BN,EAAUK,GAAGC,IAAK,EAO1B,OAAON,GAGLS,EAAqB,SAAEZ,EAAMa,EAAKC,GACtC,IACI,OAA4B,IAAnBd,EAAKa,GAAKC,GAAiB,EAAI,EAE5C,SACI,OAAO,IAIPH,EAAkB,SAAEX,EAAMa,EAAKC,GACnC,IAAIC,EAAmB,EAWvB,OATAA,GAAoBH,EAAmBZ,EAAMa,EAAM,EAAGC,EAAM,GAC5DC,GAAoBH,EAAmBZ,EAAMa,EAAM,EAAGC,GACtDC,GAAoBH,EAAmBZ,EAAMa,EAAM,EAAGC,EAAM,GAC5DC,GAAoBH,EAAmBZ,EAAMa,EAAKC,EAAM,GACxDC,GAAoBH,EAAmBZ,EAAMa,EAAKC,EAAM,GACxDC,GAAoBH,EAAmBZ,EAAMa,EAAM,EAAGC,EAAM,GAC5DC,GAAoBH,EAAmBZ,EAAMa,EAAM,EAAGC,GACtDC,GAAoBH,EAAmBZ,EAAMa,EAAM,EAAGC,EAAM,IE7CjDE,EAAqB,SAACf,EAAMC,GACrC,OAAOe,MAAMhB,GAAMiB,OAAOC,KAAK,kBAAOF,MAAMf,GAAMgB,MAAK,OCD9CE,EAAgB,SAAEnB,EAAMC,GAMjC,OAJqBe,MAAMI,KAAK,CAACC,OAAQrB,IAAO,kBAC5CgB,MAAMI,KAAK,CAACC,OAAQpB,IAAO,kBAAQqB,KAAKC,SAAW,WCH9CC,EAAsB,SAAEzB,EAAMa,EAAKC,GAE5C,IAAIY,EAAW1B,EAAKmB,KAAK,SAACN,GAAD,OAASA,EAAIc,WAGtC,OAFAD,EAASb,GAAKC,IAAQY,EAASb,GAAKC,GAE7BY,GCJEE,EAEM,mBAFNA,EAGE,eAHFA,EAII,uBAJJA,EAMG,sBANHA,EAQG,gBCHVC,EAAgB,CAClBC,WAAY,EACZC,MAAO,IACPC,SAAU,GACV/B,KAAM,GACNC,KAAM,IAGJ+B,EAAY,2BACXJ,GADW,IAEd7B,KAAMgB,EAAoBa,EAAc5B,KAAM4B,EAAc3B,QCX1DgC,EAAWC,YAAgB,CAC7BC,KDcuB,WAAqC,IAAnCC,EAAkC,uDAA1BJ,EAAcK,EAAY,uCAE3D,cAAQA,QAAR,IAAQA,OAAR,EAAQA,EAAQC,MAEZ,KAAKX,EACD,OAAO,2BACAS,GADP,IAEIrC,KAAMyB,EAAqBY,EAAMrC,KAAMsC,EAAOE,QAAQ3B,IAAKyB,EAAOE,QAAQ1B,OAGlF,KAAKc,EACD,OAAO,2BACAS,GADP,IAEIrC,KAAMoB,EAAciB,EAAMpC,KAAMoC,EAAMnC,QAG9C,KAAK0B,EACD,OAAO,2BACAS,GADP,IAEIP,WAAY,EACZ9B,KAAMgB,EAAmBqB,EAAMpC,KAAMoC,EAAMnC,QAGnD,KAAK0B,EACD,OAAO,2BACAS,GADP,IAEIrC,KAAMD,EAAesC,EAAMrC,KAAMqC,EAAMpC,KAAMoC,EAAMnC,MACnD4B,WAAYO,EAAMP,WAAa,IAGvC,KAAKF,EACD,OAAO,2BACAS,GADP,IAEInC,KAAMoC,EAAOE,QAAQtC,KACrBD,KAAMqC,EAAOE,QAAQvC,KACrBD,KAAMgB,EAAoBsB,EAAOE,QAAQvC,KAAMqC,EAAOE,QAAQtC,QAItE,QACI,OAAOmC,MClDNI,EAAQC,YACjBR,EACAS,OAAOC,8BAAgCD,OAAOC,gCCRrCC,G,MAAU,WACnB,OACI,wBAAOC,UAAU,eAAjB,UACI,mBACIC,GAAG,oBACHC,KAAK,oDACLC,OAAO,SACPC,IAAI,aACJJ,UAAU,+BALd,eAOA,mBACIC,GAAG,kBACHC,KAAK,oCACLC,OAAO,SACPC,IAAI,aACJJ,UAAU,8BALd,eAOA,mBACIC,GAAG,kBACHC,KAAK,yDACLF,UAAU,8BAHd,eAKA,mBACIC,GAAG,mBACHC,KAAK,mCACLC,OAAO,SACPC,IAAI,aACJJ,UAAU,8BALd,oBClBCK,G,MAAOC,IAAMC,MAAK,YAAqB,IAAjBxC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,IAE9BwC,EAAWC,cACXC,EAAUC,aAAY,SAAApB,GAAK,OAAIA,EAAMD,KAAKpC,KAAKa,GAAKC,MAClDkB,EAAayB,aAAY,SAAApB,GAAK,OAAIA,EAAMD,QAAxCJ,SAMR,OACI,qBACIc,UAAaU,EAAU,SAAW,UAClCE,MAAO,CAACC,MAAO3B,EAAW,EAAG4B,OAAQ5B,EAAW,GAChD6B,QARU,WACdP,ECPkB,SAAEzC,EAAKC,GAC7B,MAAO,CACHyB,KAAMX,EACNY,QAAS,CACL3B,MAAKC,QDGCgD,CAAYjD,EAAKC,W,gCEHtBiD,G,MAAc,WAEvB,IAAMT,EAAWC,cACTxB,EAAU0B,aAAY,SAAApB,GAAK,OAAIA,EAAMD,QAArCL,MAHqB,EAKOiC,mBAAS,MALhB,mBAKtBC,EALsB,KAKVC,EALU,KAkBvBC,EAAc,WACG,OAAfF,IAEJG,cAAcH,GACdC,EAAc,QAGZG,EAAO,WACTf,EDnCG,CACHf,KAAMX,KC0CJ0C,EAAc,WAChBhB,EDvBG,CACHf,KAAMX,ICuBN2C,KAGEA,EAAQ,WACVJ,KAYJ,OACI,sBAAKpB,GAAG,wBAAR,UACI,eAACyB,EAAA,EAAD,CACIX,QAhDO,WACI,OAAfI,GAEJC,EAAcO,YAAYJ,EAAMtC,KA8CxB2C,QAAQ,UAFZ,kBAIS,mBAAG5B,UAAU,mBAGtB,eAAC0B,EAAA,EAAD,CACIX,QAAUM,EACVO,QAAQ,SACR3B,GAAG,eAHP,mBAKU,mBAAGD,UAAU,oBAGvB,eAAC0B,EAAA,EAAD,CACIX,QAzDiB,WACzBQ,KAyDQK,QAAQ,UAFZ,6BAIoB,mBAAG5B,UAAU,iCAIjC,eAAC0B,EAAA,EAAD,CACIX,QAjDY,WACpBP,EDxBG,CACHf,KAAMX,ICwBN2C,KAgDQG,QAAQ,OAFZ,kBAIS,mBAAG5B,UAAU,uBAGtB,cAAC0B,EAAA,EAAD,CACIX,QAAUS,EACVI,QAAQ,UAFZ,mBAOA,eAACC,EAAA,EAAD,CAAgBD,QAAQ,OAAOE,MAAM,YAAYC,SAhDlC,SAAEC,EAAKC,GAC1BA,EAAMC,iBAEN,ID7BqB9E,EAAMD,EC6BrBgF,EAASH,EAAII,MAAM,KAEzBZ,IACAhB,GDhCqBpD,ECgCEiF,OAAOF,EAAO,IDhCVhF,ECgCekF,OAAOF,EAAO,ID/BrD,CACH1C,KAAMX,EACNY,QAAS,CACLtC,OACAD,YCqEA,UACI,cAACmF,EAAA,EAASC,KAAV,CAAeC,SAAS,QAAxB,mBACA,cAACF,EAAA,EAASC,KAAV,CAAeC,SAAS,QAAxB,mBACA,cAACF,EAAA,EAASC,KAAV,CAAeC,SAAS,QAAxB,2BClGHC,EAAO,WAAO,IAAD,EAEW9B,aAAY,SAAApB,GAAK,OAAIA,EAAMD,QAApDlC,EAFc,EAEdA,KAAMF,EAFQ,EAERA,KACR2D,EAASzD,EAHO,EAEF8B,SAGpB,OACI,sBAAKc,UAAU,OAAf,UACI,8BACI,cAAC,EAAD,MAGJ,qBAAKA,UAAU,OAAOY,MAAO,CAAEC,MAAOA,GAAtC,SAEQ3D,EAAKmB,KAAK,SAACN,EAAK2E,GAAN,OACN3E,EAAIM,KAAK,SAACsE,EAAGC,GAAJ,OACD,cAACvC,EAAD,CAEItC,IAAK2E,EACL1E,IAAK4E,GAHT,UACYF,EADZ,YACyBE,gBCf5CC,G,MAAM,WAAO,IAEhB7D,EAAe2B,aAAY,SAAApB,GAAK,OAAIA,EAAMD,QAA1CN,WAER,OACE,qCACE,sBAAKgB,UAAU,wBAAf,UACE,qBAAIA,UAAU,OAAd,iCAEE,mBACEA,UAAU,oBACVC,GAAG,OACHC,KAAK,iDACLC,OAAO,SACPC,IAAI,aACJ0C,cAAY,OANd,kBAQF,oBAAI7C,GAAG,cAEP,cAAC,EAAD,IAGA,qBAAID,UAAU,OAAd,0BAAoChB,QAGtC,cAAC,EAAD,S,MCzBN+D,IAASC,OACP,cAAC,IAAD,CAAUrD,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFsD,SAASC,eAAe,W","file":"static/js/main.4ee87ca0.chunk.js","sourcesContent":["import { getGridClone } from \"./getGridClone\";\r\n\r\nexport const getEvolvedGrid = ( grid, rows, cols) => {\r\n\r\n    let gridClone = getGridClone(grid);\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n        for (let j = 0; j < cols; j++) {\r\n          let count = countNeighbours( grid, i, j )\r\n\r\n          // Underpopulation or overpopulation\r\n          if (grid[i][j] && (count < 2 || count > 3)) \r\n            gridClone[i][j] = false;\r\n\r\n          // Reproduction\r\n          else if (!grid[i][j] && count === 3) \r\n            gridClone[i][j] = true;\r\n\r\n          else \r\n            gridClone[i][j] = grid[i][j]\r\n        }\r\n      }\r\n\r\n    return gridClone;\r\n}\r\n\r\nconst setCellValueHelper = ( grid, row, col ) => {\r\n  try {\r\n      return ( grid[row][col] === true )? 1 : 0;\r\n  }\r\n  catch {\r\n      return 0;\r\n   }\r\n};\r\n\r\nconst countNeighbours = ( grid, row, col ) => {\r\n  let total_neighbours = 0;\r\n\r\n  total_neighbours += setCellValueHelper(grid, row - 1, col - 1);\r\n  total_neighbours += setCellValueHelper(grid, row - 1, col);\r\n  total_neighbours += setCellValueHelper(grid, row - 1, col + 1);\r\n  total_neighbours += setCellValueHelper(grid, row, col - 1);\r\n  total_neighbours += setCellValueHelper(grid, row, col + 1);\r\n  total_neighbours += setCellValueHelper(grid, row + 1, col - 1);\r\n  total_neighbours += setCellValueHelper(grid, row + 1, col);\r\n  total_neighbours += setCellValueHelper(grid, row + 1, col + 1);\r\n\r\n  return total_neighbours;\r\n};","export const getGridClone = ( grid ) => {\r\n    return JSON.parse(JSON.stringify( JSON.parse(JSON.stringify( grid )) ));\r\n}","export const getInitializedGrid = (rows, cols) => {\r\n    return Array(rows).fill().map( () => (Array(cols).fill(false)) )\r\n}","export const getRandomGrid = ( rows, cols ) => {\r\n\r\n    const randomMatrix = Array.from({length: rows}, () => \r\n        Array.from({length: cols}, () => ( Math.random() < 0.25 ) )\r\n    );\r\n    \r\n    return randomMatrix;\r\n}\r\n","export const getSwitchedCellGrid = ( grid, row, col ) => {\r\n    \r\n    let gridCopy = grid.map( (row) => row.slice() )\r\n    gridCopy[row][col] = !gridCopy[row][col];\r\n\r\n    return gridCopy;\r\n}","\r\nexport const types = {\r\n\r\n    randomizeGrid: '[Grid] Randomize',\r\n    resetGrid: '[Grid] Reset',\r\n    setGridSize: '[Grid] Set grid size',\r\n\r\n    switchCell: '[Cell] Switch state',\r\n\r\n    gameEvolve: '[Game] Evolve',\r\n\r\n}","import { getEvolvedGrid } from \"../helpers/getEvolvedGrid\";\r\nimport { getInitializedGrid } from \"../helpers/getInitializedGrid\";\r\nimport { getRandomGrid } from \"../helpers/getRandomGrid\";\r\nimport { getSwitchedCellGrid } from \"../helpers/getSwitchedCellGrid\";\r\nimport { types } from \"../types/types\";\r\n\r\nconst initialConfig = {\r\n    generation: 0,\r\n    speed: 100,\r\n    cellSize: 15,\r\n    rows: 30,\r\n    cols: 50\r\n}\r\n\r\nconst initialState = {\r\n    ...initialConfig,\r\n    grid: getInitializedGrid( initialConfig.rows, initialConfig.cols )\r\n}\r\n\r\n//**************************************************************************\r\nexport const gameReducer = ( state = initialState, action ) => {\r\n\r\n    switch (action?.type) {\r\n\r\n        case types.switchCell:\r\n            return {\r\n                ...state,\r\n                grid: getSwitchedCellGrid( state.grid, action.payload.row, action.payload.col )\r\n            }\r\n\r\n        case types.randomizeGrid:\r\n            return {\r\n                ...state,\r\n                grid: getRandomGrid(state.rows, state.cols)\r\n            }\r\n\r\n        case types.resetGrid:\r\n            return {\r\n                ...state,\r\n                generation: 0,\r\n                grid: getInitializedGrid(state.rows, state.cols)\r\n            }\r\n            \r\n        case types.gameEvolve:\r\n            return {\r\n                ...state,\r\n                grid: getEvolvedGrid(state.grid, state.rows, state.cols),\r\n                generation: state.generation + 1\r\n            }\r\n\r\n        case types.setGridSize:\r\n            return {\r\n                ...state,\r\n                cols: action.payload.cols,\r\n                rows: action.payload.rows,\r\n                grid: getInitializedGrid( action.payload.rows, action.payload.cols )\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//**************************************************************************\r\n","import { createStore, combineReducers } from 'redux';\r\n\r\nimport { gameReducer } from '../reducers/gameReducer';\r\n//**************************************************************************\r\n\r\nconst reducers = combineReducers({\r\n    game: gameReducer,\r\n})\r\n\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n)","import React from 'react'\r\n\r\nimport '../styles/contact.css'\r\n\r\nexport const Contact = () => {\r\n    return (\r\n        <aside className=\"contact__bar\">\r\n            <a \r\n                id=\"contact__linkedin\"\r\n                href=\"https://www.linkedin.com/in/jesusgonzalezalvarez/\" \r\n                target=\"_blank\" \r\n                rel=\"noreferrer\"\r\n                className=\"contact__icon fa fa-linkedin\"\r\n            > </a>\r\n            <a \r\n                id=\"contact__github\"\r\n                href=\"https://github.com/JesusGonzalezA\" \r\n                target=\"_blank\" \r\n                rel=\"noreferrer\"\r\n                className=\"contact__icon fab fa-github\"\r\n            > </a>\r\n            <a \r\n                id=\"contact__google\"\r\n                href=\"mailto:jesusgranada99@gmail.com?Subject=Hi%20Jesús!\" \r\n                className=\"contact__icon fab fa-google\"\r\n            > </a>\r\n            <a \r\n                id=\"contact__twitter\"\r\n                href=\"https://twitter.com/JesusGonADev\" \r\n                target=\"_blank\" \r\n                rel=\"noreferrer\"\r\n                className=\"contact__icon fa fa-twitter\"\r\n            > </a>\r\n    </aside>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { switchCell } from '../actions/game';\r\n\r\nimport '../styles/grid.css'\r\n\r\n//**************************************************************************\r\n\r\nexport const Cell = React.memo(( { row, col } ) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isAlive = useSelector(state => state.game.grid[row][col]);\r\n    const { cellSize } = useSelector(state => state.game);\r\n\r\n    const selectBox = () => {\r\n        dispatch( switchCell( row, col ))\r\n    }\r\n    \r\n    return (\r\n        <div \r\n            className={ (isAlive)? 'box on' : 'box off' }\r\n            style={{width: cellSize + 1, height: cellSize + 1}}\r\n            onClick={ selectBox }\r\n        />\r\n    )\r\n})","import { types } from \"../types/types\"\r\n\r\nexport const gameEvolve = () => {\r\n    return {\r\n        type: types.gameEvolve\r\n    }\r\n}\r\n\r\nexport const switchCell = ( row, col ) => {\r\n    return {\r\n        type: types.switchCell,\r\n        payload: {\r\n            row, col\r\n        }\r\n    }\r\n}\r\n\r\nexport const randomizeGrid = () => {\r\n    return {\r\n        type: types.randomizeGrid\r\n    }\r\n} \r\n\r\nexport const resetGrid = () => {\r\n    return {\r\n        type: types.resetGrid\r\n    }\r\n}\r\n\r\nexport const setGridSize = ( cols, rows ) => {\r\n    return {\r\n        type: types.setGridSize,\r\n        payload: {\r\n            cols,\r\n            rows\r\n        }\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\nimport { gameEvolve, randomizeGrid, resetGrid, setGridSize } from '../actions/game';\r\n\r\nimport '../styles/controllers.css'\r\n\r\n//**************************************************************************\r\nexport const Controllers = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const { speed } = useSelector(state => state.game);\r\n\r\n    const [intervalId, setIntervalId] = useState(null);\r\n\r\n    const handlePlay = () => {\r\n        if (intervalId !== null) return;\r\n\r\n        setIntervalId(setInterval(play, speed))\r\n    }\r\n\r\n    const handleNextGeneration = () => {\r\n        play();\r\n    }\r\n\r\n    \r\n    const handlePause = () => {\r\n        if (intervalId === null) return;\r\n\r\n        clearInterval(intervalId);\r\n        setIntervalId(null);\r\n    }\r\n\r\n    const play = () => {\r\n        dispatch( gameEvolve() );\r\n    }\r\n    \r\n    const handleRandomize = () => {\r\n        dispatch( randomizeGrid() );\r\n        pause();\r\n    }\r\n\r\n    const handleReset = () => {\r\n        dispatch( resetGrid() );\r\n        pause();\r\n    }\r\n\r\n    const pause = () => {\r\n        handlePause();\r\n    }    \r\n\r\n    const handleGridSize = ( key, event ) => {\r\n        event.preventDefault();\r\n\r\n        const aspect = key.split('x');\r\n\r\n        handleReset();\r\n        dispatch( setGridSize( Number(aspect[0]), Number(aspect[1])) );\r\n    }\r\n\r\n    return (\r\n        <div id=\"controllers-container\">\r\n            <Button \r\n                onClick={ handlePlay }\r\n                variant=\"success\"\r\n            >\r\n                Play <i className=\"fas fa-play\"></i>\r\n            </Button>\r\n\r\n            <Button \r\n                onClick={ handlePause }\r\n                variant=\"danger\"\r\n                id=\"pause-button\"\r\n            >\r\n                Pause <i className=\"fas fa-pause\"></i>\r\n            </Button>\r\n\r\n            <Button \r\n                onClick={ handleNextGeneration }\r\n                variant=\"success\"\r\n            >\r\n                Next Generation <i className=\"fas fa-angle-double-right\"></i>\r\n            </Button>\r\n            \r\n\r\n            <Button \r\n                onClick={ handleRandomize }\r\n                variant=\"info\"\r\n            >\r\n                Seed <i className=\"fas fa-seedling\"></i>\r\n            </Button>\r\n\r\n            <Button \r\n                onClick={ handleReset }\r\n                variant=\"warning\"\r\n            >\r\n                Reset\r\n            </Button>\r\n\r\n            <DropdownButton variant=\"dark\" title=\"Grid size\" onSelect={ handleGridSize }>\r\n                <Dropdown.Item eventKey=\"20x10\">20x10</Dropdown.Item>\r\n                <Dropdown.Item eventKey=\"50x30\">50x30</Dropdown.Item>\r\n                <Dropdown.Item eventKey=\"60x40\">60x40</Dropdown.Item>\r\n            </DropdownButton>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { Cell } from './Cell';\r\nimport { Controllers } from './Controllers';\r\n\r\nimport '../styles/grid.css'\r\n//**************************************************************************\r\nexport const Grid = () => {\r\n\r\n    const { cols, grid, cellSize } = useSelector(state => state.game);\r\n    const width = (cols * cellSize);\r\n\r\n    return (\r\n        <div className=\"mt-5\">\r\n            <div>\r\n                <Controllers />\r\n            </div>\r\n            \r\n            <div className=\"grid\" style={{ width: width }}>\r\n                {\r\n                    grid.map( (row, index_row) => \r\n                        row.map( (_, index_col) => ( \r\n                                <Cell \r\n                                    key={`${index_row}_${index_col}`} \r\n                                    row={index_row}\r\n                                    col={index_col}\r\n                                />\r\n                        ))\r\n                    )\r\n                }\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Contact } from './components/Contact';\nimport { Grid } from './components/Grid';\n\nimport './styles/styles.css'\n//**************************************************************************\n\nexport const App = () => {\n  \n  const { generation } = useSelector(state => state.game);\n\n  return (\n    <>\n      <div className=\"container text-center\">\n        <h1 className=\"mt-5\">\n          The Game of life&nbsp;\n          <a \n            className=\"fa fa-info-circle\" \n            id=\"info\"\n            href=\"https://en.wikipedia.org/wiki/The_Game_of_Life\" \n            target=\"_blank\"\n            rel=\"noreferrer\"\n            aria-hidden=\"true\"> </a>\n        </h1>\n        <hr id=\"separator\" />\n\n        <Grid />\n\n\n        <h2 className=\"mt-5\">Generations: { generation }</h2>\n      </div>\n\n      <Contact />\n    </>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport { store } from './store/store'\nimport { App } from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}